#!/bin/bash

# Settings
tmpfile=/tmp/tron.txt

# Defaults
njobs=4
game=icosahedron
count=1000
rotate=true

declare -a players wins total
argc=0

usage() {
	echo "Usage: $0 [options] player1 [player2 ...]

Options:
    -c N, --count N          Number of games to do
    -g GAME, --game GAME     Name of the game config to use
    -j N, --jobs N           Number of jobs to spawn
    -s, --static             Do not rotate the order of players
"
	exit 0
}

while [ -n "$1" ]; do
	case "$1" in
		-c|--count) count=$2; shift 2 ;;
		-g|--game) game=$2; shift 2 ;;
		-j|--jobs) njobs=$2; shift 2 ;;
		-s|--static) rotate=false; shift ;;
		-h|--help) usage; exit 0 ;;
		-*) echo "Invalid option: $1"; exit 1 ;;
		*) players[$argc]=$1; let argc++; shift ;;
	esac
done
game_p=${game}.gam

nplayers=$(sed -n 's/^nb_players.*\([0-9]\+\)/\1/p' $game_p)
if [ $argc -eq 0 ]; then
	usage
	exit 0
elif [ ! $argc -eq $nplayers ]; then
	echo "$nplayers players required, $argc provided"
	exit 2
fi

i=0
for p in ${players[@]}; do
	wins[$i]=0
	total[$i]=0
	let i++
done
ls $game_p &>/dev/null || { echo "No such game: $game"; exit 2; }
: > $tmpfile

i_todo=$(( ($count/$njobs)+1 ))
i_done=0
if $rotate; then
	n0=1
	n1=$nplayers
fi
for (( b=0; b<$i_todo; b++ )); do
	for (( i=0; i<$njobs; i++ )); do
		j=$(($i_done+$i))
		[ $j -ge $count ] && break
		if $rotate; then
			./Game ${players[@]:$n1} ${players[@]:0:$n1} -s $RANDOM < $game_p 2>/dev/null |\
				grep '^score ' | tail -n 1 | (read -a result;\
					echo ${result[@]:$n0} ${result[@]:1:$(($n0-1))} ) >> $tmpfile &
			let n0++ n1--
			[ $n0 -gt $nplayers ] && { n0=1; n1=$nplayers; }
		else
			./Game ${players[@]} -s $RANDOM < $game_p 2>/dev/null |\
				grep '^score ' | tail -n 1 | (read -a result;\
					echo ${result[@]:1} ) >> $tmpfile &
		fi
	done
	wait
	i_done=$(($i_done+$i))
	echo -en "\r$i_done ($(($i_done*100/$count))%)"
done
echo

max() {
	imax=0
	vmax=-1
	i=0
	for v in $@; do
		[ $v -eq $vmax ] && return
		[ $v -gt $vmax ] && { imax=$i; vmax=$v; }
		let i++
	done
	echo -n $imax
}

n=0
while read result; do
	[ -z "$result" ] && continue
	i=0
	for r in ${result[@]}; do
		total[$i]=$((${total[$i]}+$r))
		let i++
	done
	winner=$(max $result)
	if [ -n "$winner" ]; then
		wins[$winner]=$(( ${wins[$winner]} + 1 ))
		let n++
		echo -en "\r$n successful games with no ties"
	fi
done < $tmpfile

echo
echo
(
echo -e "Name;;% wins;;# wins;;# points;;~ points"
for (( i=0; i<$nplayers; i++ )); do
	p_wins=$( bc -l <<< "scale=3; (${wins[$i]}*100) / $n" )
	a_points=$( bc -l <<< "scale=2; (${total[$i]}) / $n" )
	echo -e "${players[i]};;$p_wins;;${wins[$i]};;${total[$i]};;$a_points"
done
) | column -t -s ';;'
